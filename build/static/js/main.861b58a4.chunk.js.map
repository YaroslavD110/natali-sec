{"version":3,"sources":["composeData/loadData.ts","composeData/parseData.ts","composeData/index.ts","DataVisualizer/Select.tsx","DataVisualizer/Table.tsx","DataVisualizer/index.tsx","App.tsx","index.tsx"],"names":["loadData","fetch","then","r","arrayBuffer","colKeys","sectionKeys","findByRange","num","ranges","findIndex","start","end","parseXLSXData","workbook","sheetName","SheetNames","sheet","Sheets","colData","lastRowNumber","parseInt","tail","split","join","Object","keys","key","includes","keyStruct","colKey","rowNumber","v","parsedData","Array","length","sectionRanges","mainColumn","rowValue","index","k","NaN","map","composeSectionRanges","sectionAssets","sectionIndex","push","name","range","s","i","a","j","composeSectionAssets","section","assets","asset","ownerKey","find","positionKey","categoryKey","risks","risksRowKeys","filter","riskKey","riskRange","sources","sourcesRowKeys","sourceKey","sourceNumber","nextRiskKey","realisationsRowKeys","realisations","realisaionKey","owner","position","category","XLSXData","readXLSX","type","Select","props","selected","setSelected","availableAssets","availableRisks","riskTypes","Form","className","Group","widths","Dropdown","fluid","selection","clearable","onChange","_","data","riskType","value","assetName","riskName","options","text","placeholder","disabled","Table","Segment","Header","icon","Icon","risk","celled","Row","HeaderCell","Body","Cell","realisation","rowSpan","DataVisualizer","React","selectedData","setSelectedData","setAssets","setRisks","uniq","assetData","riskData","Container","d","App","useState","setData","useEffect","composeData","Dimmer","active","Loader","indeterminate","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.861b58a4.chunk.js","sourcesContent":["const xlsxFileURL = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vS8jZCwOdkYsBe7ite2E8nejzNAKZCgENwe6KBw6w7WtHh_TZALsW08kORNAYWPsZSmnx7Iscdcuky_/pub?output=xlsx';\n\nexport function loadData() {\n  return fetch(xlsxFileURL).then((r) => r.arrayBuffer());\n}","import { WorkBook } from 'xlsx';\nimport { tail } from 'lodash';\n\ntype Range = { start: number; end: number; };\nexport type Section = {\n  name: string;\n  assets: Asset[];\n};\nexport type Asset = {\n  name: string;\n  position: string;\n  owner: string;\n  category: string;\n  risks: Risk[];\n};\nexport type Risk = {\n  name: string;\n  sources: RiskSource[];\n};\nexport type RiskSource = {\n  name: string;\n  realisations: string[];\n};\n\nconst colKeys = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];\nconst sectionKeys = [\n  'Порушення цілісності інформаційного активу підприємства',\n  'Порушення доступності інформаційного активу підприємства',\n  'Порушення конфіденційності інформаційного активу підприємства'\n];\n\nfunction findByRange(num: number, ranges: Range[]) {\n  return ranges.findIndex((r) => r.start <= num && r.end >= num);\n}\n\nfunction composeSectionRanges(mainColumn: any, lastRowNumber: number) {\n  let sectionRanges: Range[] = new Array(sectionKeys.length);\n  \n  for (const key of Object.keys(mainColumn)) {\n    const rowNumber = parseInt(key);\n    const rowValue = mainColumn[key];\n\n    const index = sectionKeys.findIndex((k) => k === rowValue);\n    if (index >= 0) {\n      sectionRanges[index] = {\n        start: rowNumber,\n        end: NaN\n      };\n    }\n  }\n\n  return sectionRanges.map((r, index) => ({\n    start: r.start,\n    end: sectionRanges[index + 1] ? sectionRanges[index + 1].start - 1 : lastRowNumber\n  }));\n}\n\nfunction composeSectionAssets(mainColumn: any, sectionRanges: Range[]) {\n  const sectionAssets: { name: string; range: Range; }[][] = new Array(sectionKeys.length);\n\n  for (const key of Object.keys(mainColumn)) {\n    const rowNumber = parseInt(key);\n    const rowValue: string = mainColumn[key];\n\n    const sectionIndex = findByRange(rowNumber, sectionRanges);\n    if (sectionIndex < 0 || rowValue.includes('актив')) {\n      continue;\n    }\n\n    if (!sectionAssets[sectionIndex]) {\n      sectionAssets[sectionIndex] = [];\n    }\n\n    sectionAssets[sectionIndex].push({\n      name: rowValue,\n      range: {\n        start: rowNumber,\n        end: NaN\n      }\n    });\n  }\n\n  return sectionAssets.map((s, i) => {\n    return s.map((a, j) => ({\n      name: a.name,\n      range: {\n        start: a.range.start,\n        end: sectionAssets[i][j + 1]\n              ? sectionAssets[i][j + 1].range.start - 1\n              : sectionRanges[i].end\n      }\n    }))\n  });\n}\n\nexport function parseXLSXData(workbook: WorkBook): Array<Section> | null {\n  const sheetName = workbook.SheetNames[0];\n  const sheet = workbook.Sheets[sheetName];\n\n  if (!sheet) {\n    return null;\n  }\n\n  const colData: any = {};\n  const lastRowNumber = parseInt(\n    tail(sheet['!ref']!.split(':')[1].split('')).join('')\n  );\n  for (const key of Object.keys(sheet)) {\n    if (!colKeys.includes(key[0])) {\n      continue;\n    }\n\n    const keyStruct = key.split('');\n    const colKey = keyStruct[0];\n    if (!colData[colKey]) {\n      colData[colKey] = {};\n    }\n    \n    const rowNumber = parseInt(tail(keyStruct).join(''));\n    if (!rowNumber) {\n      return null;\n    }\n\n    colData[colKey][rowNumber] = sheet[key].v;\n  }\n\n  const parsedData = new Array<Section>(sectionKeys.length);\n  const sectionRanges = composeSectionRanges(colData[colKeys[0]], lastRowNumber);\n  const sectionAssets = composeSectionAssets(colData[colKeys[0]], sectionRanges);\n\n  let index = 0;\n  for (const section of sectionAssets) {\n    const assets = new Array<Asset>();\n\n    for (const asset of section) {\n      const ownerKey = Object.keys(colData[colKeys[1]]).find((key) => {\n        const num = parseInt(key);\n    \n        return asset.range.start <= num && asset.range.end >= num;\n      });\n      const positionKey = Object.keys(colData[colKeys[2]]).find((key) => {\n        const num = parseInt(key);\n    \n        return asset.range.start <= num && asset.range.end >= num;\n      });\n      const categoryKey = Object.keys(colData[colKeys[3]]).find((key) => {\n        const num = parseInt(key);\n    \n        return asset.range.start <= num && asset.range.end >= num;\n      });\n\n      const risks = new Array<Risk>();\n      const risksRowKeys = Object.keys(colData[colKeys[4]]).filter((key) => {\n        const num = parseInt(key);\n\n        return asset.range.start <= num && asset.range.end >= num;\n      });\n      for (let i = 0; i < risksRowKeys.length; i++) {\n        const riskKey = risksRowKeys[i];\n        const riskNumber = parseInt(riskKey);\n        const nextRiskKey = risksRowKeys[i + 1] ? parseInt(risksRowKeys[i + 1]) - 1 : asset.range.end;\n        const riskRange: Range = { start: riskNumber, end: nextRiskKey };\n\n        const sources = new Array<RiskSource>();\n        const sourcesRowKeys = Object.keys(colData[colKeys[5]]).filter((k) => {\n          const num = parseInt(k);\n\n          return riskRange.start <= num && riskRange.end >= num;\n        });\n\n        for (let j = 0; j < sourcesRowKeys.length; j++) {\n          const sourceKey = sourcesRowKeys[j];\n          const sourceNumber = parseInt(sourceKey);\n          const nextRiskKey = sourcesRowKeys[j + 1] ? parseInt(sourcesRowKeys[j + 1]) - 1 : riskRange.end;\n          const realisationsRowKeys = Object.keys(colData[colKeys[6]]).filter((k) => {\n            const num = parseInt(k);\n  \n            return sourceNumber <= num && nextRiskKey >= num;\n          });\n\n          sources.push({\n            name: colData[colKeys[5]][sourceKey],\n            realisations: realisationsRowKeys.map(\n              (realisaionKey) => colData[colKeys[6]][realisaionKey]\n            )\n          });\n        }\n\n        risks.push({\n          name: colData[colKeys[4]][riskKey],\n          sources\n        });\n      }\n\n      assets.push({\n        name: asset.name,\n        owner: colData[colKeys[1]][ownerKey!],\n        position: colData[colKeys[2]][positionKey!],\n        category: colData[colKeys[3]][categoryKey!],\n        risks\n      });\n    }\n\n    parsedData[index] = {\n      name: sectionKeys[index],\n      assets\n    };\n\n    index++;\n  }\n\n  return parsedData;\n}","import { read as readXLSX } from 'xlsx';\n\nimport { loadData } from './loadData';\nimport { parseXLSXData } from './parseData';\n\nexport async function composeData() {\n  const XLSXData = await loadData();\n  const workbook = readXLSX(XLSXData, { type: 'array' });\n\n  return parseXLSXData(workbook);\n}","import * as React from 'react';\nimport { Form, Dropdown } from 'semantic-ui-react';\n\nimport { ISelected } from './index';\n\ninterface ISelectProps {\n  selected: ISelected;\n  availableAssets: string[];\n  availableRisks: string[];\n  setSelected: React.Dispatch<React.SetStateAction<ISelected>>;\n  riskTypes: { name: string; index: number }[];\n}\n\nexport const Select: React.FC<ISelectProps> = (props) => {\n  const { selected, setSelected, availableAssets, availableRisks, riskTypes } = props;\n\n  return (\n    <Form className=\"ns-form\">\n      <Form.Group widths='equal'>\n        <Dropdown\n          fluid\n          selection\n          clearable\n          className=\"ns-select\"\n          onChange={(_, data) => setSelected({\n            riskType: parseInt(data.value as string),\n            assetName: null,\n            riskName: null\n          })}\n          options={riskTypes.map(({ name, index }) => ({\n            key: index,\n            value: index,\n            text: name\n          }))}\n          value={selected.riskType}\n          placeholder='Виберіть тип загрози'\n        />\n\n        <Dropdown\n          fluid\n          selection\n          clearable\n          className=\"ns-select\"\n          onChange={(_, data) => setSelected({\n            ...selected,\n            assetName: data.value as string || null\n          })}\n          options={availableAssets.map((a) => ({\n            key: a,\n            value: a,\n            text: a\n          }))}\n          value={selected.assetName as string}\n          placeholder='Виберіть інформаційний актив'\n          disabled={availableAssets.length === 0}\n        />\n\n        <Dropdown\n          fluid\n          selection\n          clearable\n          className=\"ns-select\"\n          onChange={(_, data) => setSelected({\n            ...selected,\n            riskName: data.value as string || null\n          })}\n          options={availableRisks.map((r) => ({\n            key: r,\n            value: r,\n            text: r\n          }))}\n          value={selected.riskName as string}\n          placeholder='Виберіть загрозу ІБ'\n          disabled={availableRisks.length === 0}\n        />\n      </Form.Group>\n    </Form>\n  );\n};\n","import * as React from \"react\";\nimport { Segment, Header, Icon, Table as SemanticTable } from 'semantic-ui-react';\n\nimport { ISelectedData } from \"./index\";\n\ninterface ITableProps {\n  data: ISelectedData | null;\n}\n\nexport const Table: React.FC<ITableProps> = (props) => {\n  const { data } = props;\n\n  if (!data) {\n    return (\n      <Segment placeholder>\n        <Header icon>\n          <Icon name='info circle' />\n          Виберіть параметри вижче для відображення механізмів реалізації загрозі ІБ\n        </Header>\n      </Segment>\n    );\n  }\n\n  const { asset, risk } = data;\n\n  return (\n    <>\n      <SemanticTable celled>\n        <SemanticTable.Header>\n          <SemanticTable.Row>\n            <SemanticTable.HeaderCell>Інформаційний актив</SemanticTable.HeaderCell>\n            <SemanticTable.HeaderCell>Власник активу</SemanticTable.HeaderCell>\n            <SemanticTable.HeaderCell>Місце розташування</SemanticTable.HeaderCell>\n            <SemanticTable.HeaderCell>Категорія активу</SemanticTable.HeaderCell>\n          </SemanticTable.Row>\n        </SemanticTable.Header>\n\n        <SemanticTable.Body>\n          <SemanticTable.Row>\n            <SemanticTable.Cell>{asset.name}</SemanticTable.Cell>\n            <SemanticTable.Cell>{asset.owner}</SemanticTable.Cell>\n            <SemanticTable.Cell>{asset.position}</SemanticTable.Cell>\n            <SemanticTable.Cell>{asset.category}</SemanticTable.Cell>\n          </SemanticTable.Row>\n        </SemanticTable.Body>\n      </SemanticTable>\n\n      <SemanticTable celled>\n        <SemanticTable.Header>\n          <SemanticTable.Row>\n            <SemanticTable.HeaderCell>Джерело загроз</SemanticTable.HeaderCell>\n            <SemanticTable.HeaderCell>Механізм реалізації нападу через уразливість (ідентифікувати уразливість)</SemanticTable.HeaderCell>\n          </SemanticTable.Row>\n        </SemanticTable.Header>\n\n        <SemanticTable.Body>\n          {risk.sources.map((s) => {\n            return s.realisations.map((realisation, index) => (\n              <SemanticTable.Row key={`${s.name}-${index}`}>\n                {index === 0 && <SemanticTable.Cell rowSpan={s.realisations.length}>{s.name}</SemanticTable.Cell>}\n                <SemanticTable.Cell>{realisation}</SemanticTable.Cell>\n              </SemanticTable.Row>\n            ));\n          })}\n        </SemanticTable.Body>\n      </SemanticTable>\n    </>\n  );\n};\n","import * as React from \"react\";\nimport { Container } from 'semantic-ui-react';\nimport { uniq } from 'lodash';\n\nimport { Asset, Risk, Section } from \"../composeData/parseData\";\nimport { Select } from \"./Select\";\nimport { Table } from \"./Table\";\n\nexport interface ISelected {\n  riskType: number;\n  assetName?: string | null;\n  riskName?: string | null;\n}\n\nexport interface ISelectedData {\n  asset: Asset;\n  risk: Risk;\n}\n\ninterface IDataVisualizerProps {\n  data: Array<Section>;\n}\n\nexport const DataVisualizer: React.FC<IDataVisualizerProps> = (props) => {\n  const { data } = props;\n\n  const [selectedData, setSelectedData] = React.useState<ISelectedData | null>(null);\n  const [availableAssets, setAssets] = React.useState<string[]>([]);\n  const [availableRisks, setRisks] = React.useState<string[]>([]);\n  const [selected, setSelected] = React.useState<ISelected>({\n    assetName: null, riskName: null, riskType: 0\n  });\n\n  React.useEffect(() => {\n    setAssets(uniq(data[selected.riskType]?.assets.map((a) => a.name)));\n  }, [selected.riskType]);\n\n  React.useEffect(() => {\n    if (selected.assetName) {\n      const assetData = data[selected.riskType].assets.find(\n        (a) => a.name === selected.assetName\n      );\n\n      setRisks(assetData?.risks.map((r) => r.name) || []);\n    } else {\n      setRisks([]);\n    }\n  }, [selected.assetName]);\n\n  React.useEffect(() => {\n    const { riskType, assetName, riskName } = selected;\n\n    if (typeof riskType === 'number' && assetName && riskName) {\n      const assetData = data[selected.riskType].assets.find(\n        (a) => a.name === selected.assetName\n      );\n      const riskData = assetData?.risks.find(\n        (r) => r.name === selected.riskName\n      );\n      \n      setSelectedData({\n        asset: assetData!,\n        risk: riskData!\n      });\n    } else {\n      setSelectedData(null);\n    }\n  }, [selected]);\n\n  return (\n    <Container>\n      <Select\n        riskTypes={data.map((d, index) => ({ name: d.name, index }))}\n        availableAssets={availableAssets}\n        availableRisks={availableRisks}\n        setSelected={setSelected}\n        selected={selected}\n      />\n      <Table data={selectedData} />\n    </Container>\n  );\n};\n","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\nimport './App.css';\nimport { composeData } from './composeData';\nimport { Section } from './composeData/parseData';\nimport { DataVisualizer } from './DataVisualizer';\n\nfunction App() {\n  const [data, setData] = React.useState<Section[] | null>(null);\n\n  React.useEffect(() => {\n    composeData()\n      .then(setData);\n  }, []);\n\n  if (!data) {\n    return (\n      <Dimmer active>\n        <Loader indeterminate>Зчекайте будь ласка, дані завантажуться!</Loader>\n      </Dimmer>\n    );\n  }\n\n  return (\n    <DataVisualizer data={data} />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'semantic-ui-css/semantic.min.css'\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}